// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<TSLanguage> tree_sitter_python() {
    return _tree_sitter_python();
  }

  late final _tree_sitter_pythonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TSLanguage> Function()>>(
          'tree_sitter_python');
  late final _tree_sitter_python =
      _tree_sitter_pythonPtr.asFunction<ffi.Pointer<TSLanguage> Function()>();
}

final class TSLanguage extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @ffi.Uint32()
  external int symbol_count;

  @ffi.Uint32()
  external int alias_count;

  @ffi.Uint32()
  external int token_count;

  @ffi.Uint32()
  external int external_token_count;

  @ffi.Uint32()
  external int state_count;

  @ffi.Uint32()
  external int large_state_count;

  @ffi.Uint32()
  external int production_id_count;

  @ffi.Uint32()
  external int field_count;

  @ffi.Uint16()
  external int max_alias_sequence_length;

  external ffi.Pointer<ffi.Uint16> parse_table;

  external ffi.Pointer<ffi.Uint16> small_parse_table;

  external ffi.Pointer<ffi.Uint32> small_parse_table_map;

  external ffi.Pointer<TSParseActionEntry> parse_actions;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> symbol_names;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> field_names;

  external ffi.Pointer<TSFieldMapSlice> field_map_slices;

  external ffi.Pointer<TSFieldMapEntry> field_map_entries;

  external ffi.Pointer<TSSymbolMetadata> symbol_metadata;

  external ffi.Pointer<ffi.Uint16> public_symbol_map;

  external ffi.Pointer<ffi.Uint16> alias_map;

  external ffi.Pointer<ffi.Uint16> alias_sequences;

  external ffi.Pointer<TSLexMode> lex_modes;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>, ffi.Uint16)>>
      lex_fn;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>, ffi.Uint16)>>
      keyword_lex_fn;

  @ffi.Uint16()
  external int keyword_capture_token;

  external UnnamedStruct4 external_scanner;

  external ffi.Pointer<ffi.Uint16> primary_state_ids;
}

final class TSParseActionEntry extends ffi.Union {
  external TSParseAction action;

  external UnnamedStruct3 entry;
}

final class TSParseAction extends ffi.Union {
  external UnnamedStruct1 shift;

  external UnnamedStruct2 reduce;

  @ffi.Uint8()
  external int type;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint16()
  external int state;

  @ffi.Bool()
  external bool extra;

  @ffi.Bool()
  external bool repetition;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int child_count;

  @ffi.Uint16()
  external int symbol;

  @ffi.Int16()
  external int dynamic_precedence;

  @ffi.Uint16()
  external int production_id;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Uint8()
  external int count;

  @ffi.Bool()
  external bool reusable;
}

final class TSFieldMapSlice extends ffi.Struct {
  @ffi.Uint16()
  external int index;

  @ffi.Uint16()
  external int length;
}

final class TSFieldMapEntry extends ffi.Struct {
  @ffi.Uint16()
  external int field_id;

  @ffi.Uint8()
  external int child_index;

  @ffi.Bool()
  external bool inherited;
}

final class TSSymbolMetadata extends ffi.Struct {
  @ffi.Bool()
  external bool visible;

  @ffi.Bool()
  external bool named;

  @ffi.Bool()
  external bool supertype;
}

final class TSLexMode extends ffi.Struct {
  @ffi.Uint16()
  external int lex_state;

  @ffi.Uint16()
  external int external_lex_state;
}

final class TSLexer extends ffi.Struct {
  @ffi.Int32()
  external int lookahead;

  @ffi.Uint16()
  external int result_symbol;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLexer>, ffi.Bool)>>
      advance;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLexer>)>>
      mark_end;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLexer>)>>
      get_column;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>)>>
      is_at_included_range_start;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>)>> eof;
}

final class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> states;

  external ffi.Pointer<ffi.Uint16> symbol_map;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      create;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<TSLexer>,
              ffi.Pointer<ffi.Bool>)>> scan;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>> serialize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>> deserialize;
}
